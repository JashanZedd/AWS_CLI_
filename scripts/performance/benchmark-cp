#!/usr/bin/env python

import argparse
import shutil
from pathlib import Path
from tempfile import TemporaryDirectory

from benchmark_utils import (benchmark_command, clean, get_default_argparser,
                             get_transfer_command, summarize)

TRANSFER_METHODS = ['cp', 'rsync', 's3']

def copy_files(args):
    """Copy files using the specified transfer method."""
    destination = Path(args.destination)
    if args.recursive:
        with TemporaryDirectory() as tmpdir:
            tmpdir_path = Path(tmpdir) / destination.name
            shutil.copytree(args.source, tmpdir_path)
            source_path = tmpdir_path
    else:
        source_path = Path(args.source)

    command = f'{args.transfer_method} {source_path} {destination}'
    command = get_transfer_command(command, args.recursive, args.quiet)

    def cleanup():
        if not args.no_cleanup:
            clean(destination, args.recursive)

    benchmark_command(
        command, args.benchmark_script, args.summarize_script,
        args.result_dir, args.num_iterations, args.dry_run,
        cleanup=cleanup
    )


def main():
    parser = get_default_argparser()
    parser.add_argument(
        '-s', '--source', required=True,
        help='A local path or s3 path.'
    )
    parser.add_argument(
        '-d', '--destination', required=True,
        help='A local path or s3 path. A directory will be created in this '
             'location to copy to in the case of a recursive transfer.'
    )
    parser.add_argument(
        '-t', '--transfer-method', choices=TRANSFER_METHODS,
        default='cp',
        help='The transfer method to use. Defaults to "cp".'
    )
    args = parser.parse_args()

    if args.transfer_method == 'cp':
        copy_files(args)
    elif args.transfer_method == 'rsync':
        # TODO: implement rsync
        pass
    elif args.transfer_method == 's3':
        # TODO: implement s3
        pass


if __name__ == "__main__":
    main()
